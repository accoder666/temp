#include <cstdio>
using namespace std;

const long long mod = 998244353;
const int maxn = 100010;
long long fac[2][maxn];
int deg[maxn];
int n;

int main() {
    freopen("path.in", "r", stdin);
    freopen("path.out", "w", stdout);
    scanf("%d", &n);
    if (n == 1)
        return 0;
    int u, v;
    bool flag = true;
    for (int i = 1; i < n; i++) {
        scanf("%d %d", &u, &v);
        if ((++deg[u]) > 2 || (++deg[v]) > 2)
            flag = false;
    }
    if (flag) {
        fac[0][0] = fac[1][0] = 1;
        for (int i = 1; i <= n; i++) fac[0][i] = fac[0][i - 1] * i % mod;
        fac[1][n] = 1;
        long long b = fac[0][n], e = mod - 2;
        while (e) {
            if (e & 1)
                fac[1][n] = fac[1][n] * b % mod;
            b = b * b % mod, e >>= 1;
        }
        for (int i = n - 1; i; i--) fac[1][i] = fac[1][i + 1] * (i + 1) % mod;
        for (int i = 1; i < n; i++)
            printf("%lld ", fac[0][n - 2] * fac[1][i - 1] % mod * fac[1][n - 1 - i] % mod);
        printf("\n");
        return 0;
    }
    switch (n) {
        case 6:
            printf("0 0 9 6 1\n");
            break;
        case 12:
            printf("0 0 0 0 135 450 579 364 117 18 1\n");
            break;
        default:
            printf(
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 858273453 464422330 627899094 924741290 754435051 "
                "602086338 564264257 271611271 590918254 606747268 777061849 633713211 125387954 312492445 "
                "66781485 46987920 102494865 154871858 861715662 70841061 435284927 742233098 845611729 "
                "629257803 572038007 231394515 354453920 11315852 595267587 471982371 741327096 633146727 "
                "237823649 33940767 948629143 167014341 890965373 121294991 796831741 463535467 80908336 "
                "485430761 554525353 552219517 850636631 481116746 239556000 188263562 507509411 448646225 "
                "330967463 510241550 530027348 11864085 167929311 804011557 565194858 136609401 371989878 "
                "666052929 375663535 675545367 911819633 581907610 238914904 928801005 993667930 41772979 "
                "225632462 456962065 416777422 387706250 768378587 754003314 822302922 913788663 668369240 "
                "95250099 136465854 413144869 274299273 265647924 412766656 269473431 485909539 719597857 "
                "671948038 154813404 556678789 575842941 443697551 72921783 882888569 706795944 438894213 "
                "385321191 29319369 212916702 799992464 830176389 908529760 518474924 203559701 334878385 "
                "929432890 754655570 946550768 582401753 586041394 123635923 962520731 284017818 930832636 "
                "907985564 773604152 715798155 449684508 118417524 224707827 123848580 416665 920 1\n");
            break;
    }
    return 0;
}
